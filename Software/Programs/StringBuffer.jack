
/**
Class for dynamic length strings.
*/
class StringBuffer {
    
    field Array chars;   // Holds the characters
    field int length;    // Current length of the string
    field int capacity;  // Total allocated space


    /**
    Constructor: Creates new dynamic string object. 
    Parameters:
            initialSize: Maxium size of stringbuffer as default.
    */
    constructor StringBuffer new(int initialSize) {
        let capacity = initialSize;
        let length = 0;
        let chars = Array.new(capacity); // Allocate memory for characters
        return this;
    }


    /**
    Method: Disposes the object.
    Parameters:
    */
    method void dispose() {
        do chars.dispose();
        do Memory.deAlloc(this);
        return;
    }


    //TODO: Handle illegal indexes.
    /** 
    Method: Append a character to the string. Character at index is overwritten.
    Parameters:
            c: Character that is appended.
            index: Position where character is added.
    */
    method void appendChar(char c, int index) {
        var int i;
        
        if (length = capacity) {
            do resize(); // Increase size if needed
        }
        let i = length;
        while (~(i = index - 1)) {
            let chars[i + 1] = chars[i];
            let i = i - 1; 
        }
        let chars[index] = c; // Add the character
        let length = length + 1;
        return;
    }


    /** 
    Method: Append a string to the string. Character at index is overwritten.
    Parameters:
            c: String that is appended.
            index: Position where string is added.
    */
    method void appendString(String s, int index) {
        var int i;
        var int j;
        var int lenS;
        let lenS = s.length();
        if (length + lenS = capacity) {
            do resize(); // Increase size if needed
        }

        let i = length - 1;
        while (~(i < (index - 1))) {
            let chars[i + lenS] = chars[i];
            let i = i - 1; 
        }

        let i = index;

        let j = 0;
        while (i < (index + lenS)) {
            let chars[i] = s.charAt(j);
            let j = j + 1;
            let i = i + 1;
        }
        let length = length + lenS;

        return;
    }

    //TODO: Appended sb might be over the length of resized array as well. add minium length increase argument.
    /** 
    Method: Append a stringbuffer to the string. Character at index is not overwritten.
    Parameters:
            c: StringBuffer that is appended.
            index: Position where stringbuffer is added.
    */
    method void appendSb(StringBuffer s, int index) {
        var int i;
        var int j;
        var int lenS;
        let lenS = s.length();
        if (length + lenS = capacity) {
            do resize(); // Increase size if needed
        }

        let i = length - 1;
        while (~(i < (index - 1))) {
            let chars[i + lenS] = chars[i];
            let i = i - 1; 
        }

        let i = index;

        let j = 0;
        while (i < (index + lenS)) {
            let chars[i] = s.charAt(j);
            let j = j + 1;
            let i = i + 1;
        }
        let length = length + lenS;

        return;
    }


    /** 
    Method: Remove a character from the string.
    Parameters:
            index: Position where character is removed.
    */
    method void removeChar(int index) {
        var int i;
        let i = index;
        while(i < length) {
            let chars[i] = chars[i + 1];
            let i = i + 1;
        }
        return;
    }


    /**
    Method: Resize the string to double capacity.
    Parameters:
    */
    method void resize() {
        var Array newChars;
        var int i;

        let newChars = Array.new(Math.multiply(capacity, 2)); // Double the size
        let i = 0;

        while (i < length) {  // Copy existing characters
            let newChars[i] = chars[i];
            let i = i + 1;
        }

        do chars.dispose(); // Free memory of an old array.
        let chars = newChars;  // Replace old array with the new one
        let capacity = Math.multiply(capacity, 2);  // Update capacity
        return;
    }


    /**
    Method: Returns character at current index.
    Parameters:
            index: Position of returned character.
    */
    method char charAt(int index) {
        return chars[index];
    }


    /**
    Method: Returns length of the string.
    Parameters:
    */
    method int length() {
        return length;
    }


    /**
    Method: Prints the string inside the StringBuffer.
    Parameters:
    */
    method void print() {
        var int i;
        let i = 0;
        while (i < length) {
            do Output.printChar(chars[i]);
            let i = i + 1;
        }
        do Output.println();
        return;
    }


    /**
    Method: Return characters. For testing purposes only.
    Parameters:
    */
    method Array getString() {
        return chars;
    }

    
    function boolean testStringBuffer() {
        var boolean pass;
        var StringBuffer sb;
        var StringBuffer sb2;
        var StringBuffer sb3;

        let pass = true;

        let sb = StringBuffer.new(5);
        // Test appending char into the beginning.
        do sb.appendChar(65,0);
        if (~(sb.charAt(0) = 65)) {
            let pass = false;
        }
        do sb.appendChar(66,1);
        do sb.appendChar(67,2);
        do sb.print();
        
        let sb2 = StringBuffer.new(5);
        do sb2.appendChar(90,0);
        do sb2.appendChar(89,1);
        do sb2.appendChar(88,2);
        do sb2.print();
        // Test appending character on top of another. doesn't work yet.
        //do sb2.appendChar(67,1);
        //do sb2.print();

        let sb3 = StringBuffer.new(5);
        // Test appending string literal.
        do sb3.appendString("kokeilu", 0);
        do sb3.print();        

        // Test removing character.
        do sb3.removeChar(0);
        if ((~(sb3.charAt(0) = 112)) & (~(sb3.length() = 6))) {
            let pass = false;
        }
        do sb3.print();

        // Test appending stringbuffer.
        do sb.print();
        do sb.appendSb(sb2, 1);
        do sb.print();

        do sb.dispose();
        do sb2.dispose();
        do sb3.dispose();
        return pass;
    }
}
