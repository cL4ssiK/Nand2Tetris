
/**
Class that handles entire text. 
Implementation ideas:
Every row is their own object.
The buffer is linked list where every row points to next row.
**/
class TextBuffer {

    field int row;
    field int column;
    field int total_rows;
    field TextRow first_row;
    field TextRow current_row;


    /**
    Constructor: Creates new textbuffer object. 
    Parameters:
    */
    constructor TextBuffer new() {
        let row = 0;        // Cursor row.
        let column = 0;     // Cursor position on a row.
        let total_rows = 1;
        let first_row = TextRow.new();
        let current_row = first_row;
        return this;
    }


    /**
    Method: Disposes the object.
    Parameters:
    */
    method void dispose() {

        let current_row = first_row.getPreviousRow();
        do current_row.setNextRow(null); // Set the last row next to null so dispose loop knows to stop.

        while(~(first_row = null)) {
            let current_row = first_row;
            let first_row = first_row.getNextRow();
            do current_row.dispose();     
        }
        do Memory.deAlloc(this);
        return;
    }


    /**
    Method: Adds character to current cursor position.
    Parameters:
            c: Character that is added.
    */
    method void writeCharacter(char c) {
        do current_row.appendChar(c, column);
        let column = column + 1; // Move cursor after writing.
        return;
    }


    /**
    Method: Removes character from current cursor position.
    Parameters:
    */
    method void removeCharacter() {
        do current_row.removeChar(column);
        let column = column - 1; // Move cursor after writing.
        return;
    }


    /**
    Method: Creates new row beginning from current cursor position.
    Parameters:
    */
    method void newRow() {
        var TextRow new_row; 
        let new_row = TextRow.new();
        
        do new_row.setNextRow(current_row.getNextRow());
        do new_row.setPreviousRow(current_row);

        do current_row.setNextRow(new_row);

        let current_row = new_row; // Set current row to new row. Hopefully xD
        let total_rows = total_rows + 1;
        //set cursor position here.
        return;
    }


    /**
    Method: Removes current row.
    Parameters:
    */
    method void removeRow() {
        var TextRow r;
        let r = current_row.getPreviousRow();
        do r.setNextRow(current_row.getNextRow());
        let current_row = r;
        
        let total_rows = total_rows - 1;
        //set cursor position here.
        let row = row - 1;              // Set cursor to previous row.
        let column = r.length() + 1;    // Set cursor to end of the previous row.
        return;
    }


    /**
    Method: Update cursor position when cursor is only moved.
    Parameters:
            col: New index for column.
            r  : New index for row.  
    */
    method void updateCursorPosition(int col, int r) {
        let column = col;
        let row = r;
        return;
    }
}