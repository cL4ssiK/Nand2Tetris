/**
Class that handles entire text. 
Implementation ideas:
Every row is their own object.
The buffer is linked list where every row points to next row.
**/
class TextBuffer {

    field int row;
    field int column;
    field int total_rows;
    field TextRow first_row;
    field TextRow current_row;


    /**
    Constructor: Creates new textbuffer object. 
    Parameters:
    */
    constructor TextBuffer new() {
        let row = 0;        // Cursor row.
        let column = 0;     // Cursor position on a row.
        let total_rows = 1;
        let first_row = TextRow.new();
        let current_row = first_row;
        return this;
    }


    /**
    Method: Disposes the object.
    Parameters:
    */
    method void dispose() {

        let current_row = first_row.getPreviousRow();
        do current_row.setNextRow(null); // Set the last row next to null so dispose loop knows to stop.

        while(~(first_row = null)) {
            let current_row = first_row;
            let first_row = first_row.getNextRow();
            do current_row.dispose();     
        }
        do Memory.deAlloc(this);
        return;
    }


    /**
    Method: Adds character to current cursor position.
    Parameters:
            c: Character that is added.
    */
    method void writeCharacter(char c) {
        do current_row.appendChar(c, column);
        let column = column + 1; // Move cursor after writing.
        return;
    }


    /**
    Method: Removes character from current cursor position.
            If cursor is at beginning of the row, appends the row to the previous row.
    Parameters:
    */
    method void removeCharacter() {
        if (column = 0) {
            do removeRow();
            return;
        }
        let column = column - 1; // Move cursor back one character.
        do current_row.removeChar(column);
        return;
    }


    /**
    Method: Creates new row beginning from current cursor position.
    Parameters:
    */
    method void newRow() {
        var TextRow new_row; 
        let new_row = TextRow.new();

        do new_row.setNextRow(current_row.getNextRow());
        do new_row.setPreviousRow(current_row);

        do current_row.setNextRow(new_row);

        let current_row = new_row; // Set current row to new row. Hopefully xD
        let total_rows = total_rows + 1;
        // Update cursor position.
        let row = row + 1;
        let column = 0;
        return;
    }


    /**
    Method: Removes current row.
    Parameters:
    */
    method void removeRow() {
        var TextRow r;
        let r = current_row.getPreviousRow();
        do r.combineRows(current_row);
        //do r.setNextRow(current_row.getNextRow());
        let current_row = r;
        
        let total_rows = total_rows - 1;
        //set cursor position here.
        let row = row - 1;              // Set cursor to previous row.
        let column = r.length();    // Set cursor to end of the previous row.
        return;
    }


    /**
    Method: Update cursor position when cursor is only moved.
    Parameters:
            col: New index for column.
            r  : New index for row.  
    */
    method void updateCursorPosition(int col, int r) {
        let column = col;
        let row = r;
        return;
    }


    /**
    Method: Update cursor position when cursor is moved.
    Parameters:  
            direction: Character that defines direction of cursor movement.
                        Can have values between 130-133.
    */
    method void moveCursor(int direction) {
        // Move left
        if (direction = 130) {
            if (column > 0) {
                let column = column - 1;
            }
        }
        // Move right
        if (direction = 132) {
            if (column < current_row.length()) {
                let column = column + 1;
            }
        }
        // Move up
        if (direction = 131) {
            if (row > 0) {
                let row = row - 1;
                let current_row = current_row.getPreviousRow();
            }
            if (column > current_row.length()) {
                let column = current_row.length();
            }
        }
        // Move down
        if (direction = 133) {
            if (row < total_rows) {
                let row = row + 1;
                let current_row = current_row.getNextRow();
            }
            if (column > current_row.length()) {
                let column = current_row.length();
            }
        }
        return;
    }


    /**
    Method: Prints current row.
    Parameters:
    */
    method void printCurrentRow() {
        do current_row.print();
        return;
    }

    //TODO: Implement method that prints entire TextBuffer.
    /**
    Method: Prints entire text row by row.
    Parameters:
    */
    method void printContents() {
        var TextRow temp;
        let temp = first_row;
        while(~(temp.getNextRow() = null)) {
            do temp.print();
            let temp = temp.getNextRow();
        }
        
        return;
    }


    /**
    Method: Returns current row of the cursor.
    Parameters:
    */
    method int cursorRow() {
        return row;
    }


    /**
    Method: Returns current column of the cursor.
    Parameters:
    */
    method int cursorColumn() {
        return column;
    }


    //TODO: More tests, boolean value correction.
    /**
    Function: Test function for TextBuffer class.
    */
    function boolean testTextBuffer() {
        var boolean pass;
        var TextBuffer file;

        let pass = true;
        let file = TextBuffer.new();

        // Test writing single character to text.
        do file.writeCharacter(66);
        do file.printCurrentRow();

        do file.writeCharacter(66);
        do file.writeCharacter(67);
        do file.writeCharacter(66);
        do file.printCurrentRow();

        // Test removing character.
        do file.removeCharacter();
        do file.printCurrentRow();
        
        // Test starting new row.
        do file.newRow();
        do file.writeCharacter(69);
        do file.printCurrentRow();

        // Test removing row.
        do file.removeRow();
        do file.printCurrentRow();

        // Test moving cursor and writing to it.
        do file.moveCursor(130);
        do file.moveCursor(130);
        do file.writeCharacter(89);
        do file.printCurrentRow();

        return true;
    }
}